{"version":3,"file":"static/js/767.bcab5aa6.chunk.js","mappings":"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","sources":["../node_modules/@100mslive/hms-virtual-background/src/constants.ts","../node_modules/@100mslive/hms-virtual-background/src/HMSEffectsPlugin.ts"],"sourcesContent":["export const EFFECTS_SDK_ASSETS = 'https://assets.100ms.live/effectsdk/3.4.3/';\n","import { tsvb } from 'effects-sdk';\nimport { HMSMediaStreamPlugin } from '@100mslive/hms-video-store';\nimport { EFFECTS_SDK_ASSETS } from './constants';\nimport { HMSVirtualBackgroundTypes } from './interfaces';\n\nexport type HMSEffectsBackground = string | MediaStream | MediaStreamTrack | HTMLVideoElement;\n\nexport class HMSEffectsPlugin implements HMSMediaStreamPlugin {\n  private effects: tsvb;\n  // Ranges from 0 to 1, inclusive\n  private blurAmount = 0;\n  private background: HMSEffectsBackground = HMSVirtualBackgroundTypes.NONE;\n  private backgroundType = HMSVirtualBackgroundTypes.NONE;\n  private preset: 'balanced' | 'quality' = 'balanced';\n  private initialised = false;\n  private intervalId: NodeJS.Timer | null = null;\n  private onInit;\n  private onResolutionChangeCallback?: (width: number, height: number) => void;\n  private canvas: HTMLCanvasElement;\n\n  constructor(effectsSDKKey: string, onInit?: () => void) {\n    this.effects = new tsvb(effectsSDKKey);\n    this.onInit = onInit;\n    this.effects.config({\n      sdk_url: EFFECTS_SDK_ASSETS,\n      models: {\n        colorcorrector: '',\n        facedetector: '',\n        lowlighter: '',\n      },\n      wasmPaths: {\n        'ort-wasm.wasm': `${EFFECTS_SDK_ASSETS}ort-wasm.wasm`,\n        'ort-wasm-simd.wasm': `${EFFECTS_SDK_ASSETS}ort-wasm-simd.wasm`,\n      },\n    });\n    this.canvas = document.createElement('canvas');\n    this.effects.onError(err => {\n      // currently logging info type messages as well\n      if (!err.type || err.type === 'error') {\n        console.error('[HMSEffectsPlugin]', err);\n      }\n    });\n    this.effects.cache();\n    this.effects.onReady = () => {\n      if (this.effects) {\n        this.initialised = true;\n        this.onInit?.();\n        this.effects.setBackgroundFitMode('fill');\n        this.effects.setSegmentationPreset(this.preset);\n      }\n    };\n  }\n\n  getName(): string {\n    return 'HMSEffects';\n  }\n\n  private executeAfterInit(callback: () => void) {\n    if (this.initialised) {\n      callback();\n    }\n\n    if (this.intervalId !== null) {\n      clearInterval(this.intervalId);\n    }\n    this.intervalId = setInterval(() => {\n      if (this.initialised) {\n        clearInterval(this.intervalId!);\n        callback();\n      }\n    }, 100);\n  }\n\n  removeBlur() {\n    this.blurAmount = 0;\n    this.executeAfterInit(() => {\n      this.effects.clearBlur();\n    });\n  }\n\n  removeBackground() {\n    this.background = '';\n    this.executeAfterInit(() => {\n      this.effects.clearBackground();\n    });\n  }\n\n  /**\n   * @param blur ranges between 0 and 1\n   */\n  setBlur(blur: number) {\n    this.blurAmount = blur;\n    this.backgroundType = HMSVirtualBackgroundTypes.BLUR;\n    this.removeBackground();\n    this.executeAfterInit(() => {\n      this.effects.setBlur(this.blurAmount);\n      this.effects.run();\n    });\n  }\n\n  /**\n   * @param preset can be 'quality' or 'balanced'. The 'quality' preset has better quality but higher CPU usage than 'balanced'\n   */\n  async setPreset(preset: 'quality' | 'balanced') {\n    this.preset = preset;\n    return new Promise((resolve, reject) => {\n      this.executeAfterInit(() => {\n        this.effects.setSegmentationPreset(this.preset).then(resolve).catch(reject);\n      });\n    });\n  }\n\n  onResolutionChange(callback: (width: number, height: number) => void) {\n    this.onResolutionChangeCallback = callback;\n  }\n\n  getPreset() {\n    return this.preset;\n  }\n\n  removeEffects() {\n    this.backgroundType = HMSVirtualBackgroundTypes.NONE;\n    this.removeBackground();\n    this.removeBlur();\n    this.executeAfterInit(() => {\n      this.effects.stop();\n    });\n  }\n\n  setBackground(url: HMSEffectsBackground) {\n    this.background = url;\n    this.backgroundType = HMSVirtualBackgroundTypes.IMAGE;\n    this.removeBlur();\n    this.executeAfterInit(() => {\n      this.effects.setBackground(this.background);\n      this.effects.run();\n    });\n  }\n\n  getBlurAmount() {\n    return this.blurAmount;\n  }\n\n  getBackground() {\n    return this.background || this.backgroundType;\n  }\n\n  private updateCanvas(stream: MediaStream) {\n    const { height, width } = stream.getVideoTracks()[0].getSettings();\n    this.canvas.width = width!;\n    this.canvas.height = height!;\n    this.effects.useStream(stream);\n    this.effects.toCanvas(this.canvas);\n  }\n\n  apply(stream: MediaStream): MediaStream {\n    this.effects.clear();\n    this.applyEffect();\n    this.effects.onChangeInputResolution(() => {\n      this.updateCanvas(stream);\n      const { height, width } = stream.getVideoTracks()[0].getSettings();\n      this.onResolutionChangeCallback?.(width!, height!);\n    });\n    this.updateCanvas(stream);\n    return this.canvas.captureStream(30) || stream;\n  }\n\n  stop() {\n    this.removeEffects();\n  }\n\n  private applyEffect() {\n    if (this.blurAmount) {\n      this.setBlur(this.blurAmount);\n    } else if (this.background) {\n      this.setBackground(this.background);\n    }\n  }\n}\n"],"names":["a","u","constructor","t","i","blurAmount","background","backgroundType","preset","initialised","intervalId","this","effects","d","onInit","config","sdk_url","models","colorcorrector","facedetector","lowlighter","wasmPaths","concat","canvas","document","createElement","onError","e","type","console","error","cache","onReady","call","setBackgroundFitMode","setSegmentationPreset","getName","executeAfterInit","clearInterval","setInterval","removeBlur","clearBlur","removeBackground","clearBackground","setBlur","run","setPreset","h","Promise","then","catch","onResolutionChange","onResolutionChangeCallback","getPreset","removeEffects","stop","setBackground","getBlurAmount","getBackground","updateCanvas","height","width","getVideoTracks","getSettings","useStream","toCanvas","apply","clear","applyEffect","onChangeInputResolution","r","captureStream"],"sourceRoot":""}